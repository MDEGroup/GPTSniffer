public class BST<E extends Comparable<E>> {    // ... Other methods and variables ...    // Returns true if the tree is a 'full' binary tree    public boolean isFullBST() {        int depth = depth(root);        return isFullBST(root, depth, 0);    }    private int depth(TreeNode<E> node) {        if (node == null) {            return 0;        } else {            int leftDepth = depth(node.left);            int rightDepth = depth(node.right);            return Math.max(leftDepth, rightDepth) + 1;        }    }    private boolean isFullBST(TreeNode<E> node, int depth, int level) {        if (node == null) {            return true;        }        if (node.left == null && node.right == null) {            return level == depth - 1;        }        if (node.left == null || node.right == null) {            return false;        }        return isFullBST(node.left, depth, level + 1) && isFullBST(node.right, depth, level + 1);    }    // ... Other methods ...    public static void main(String[] args) {        BST<Integer> bst = new BST<>();        bst.insert(50);        bst.insert(30);        bst.insert(70);        bst.insert(20);        bst.insert(40);        bst.insert(60);        bst.insert(80);        System.out.println("Is the tree a full binary tree? " + bst.isFullBST());    }    // ... Other methods and inner classes ...}