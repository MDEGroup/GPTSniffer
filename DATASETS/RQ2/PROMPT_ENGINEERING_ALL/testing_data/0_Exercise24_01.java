import java.util.Arrays;public class MyArrayList<E> extends MyAbstractList<E> {    private static final int INITIAL_CAPACITY = 10;    private E[] data;    @SuppressWarnings("unchecked")    public MyArrayList() {        data = (E[]) new Object[INITIAL_CAPACITY];    }    @Override    public boolean addAll(MyList<E> otherList) {        Object[] otherArray = otherList.toArray();        int newSize = size() + otherList.size();        if (newSize > data.length) {            ensureCapacity(newSize);        }        System.arraycopy(otherArray, 0, data, size(), otherList.size());        setSize(newSize);        return true;    }    @Override    public boolean removeAll(MyList<E> otherList) {        Object[] otherArray = otherList.toArray();        int newSize = 0;        for (int i = 0; i < size(); i++) {            if (!contains((E) otherArray[i])) {                data[newSize++] = data[i];            }        }        setSize(newSize);        return newSize < size();    }    @Override    public boolean retainAll(MyList<E> otherList) {        Object[] otherArray = otherList.toArray();        int newSize = 0;        for (int i = 0; i < size(); i++) {            if (contains((E) otherArray[i])) {                data[newSize++] = data[i];            }        }        setSize(newSize);        return newSize < size();    }    private void ensureCapacity(int capacity) {        if (capacity > data.length) {            int newCapacity = data.length * 2;            data = Arrays.copyOf(data, Math.max(capacity, newCapacity));        }    }    @SuppressWarnings("unchecked")    @Override    public E[] toArray() {        return (E[]) Arrays.copyOf(data, size());    }    public static void main(String[] args) {        MyArrayList<String> list1 = new MyArrayList<>();        MyArrayList<String> list2 = new MyArrayList<>();        list1.addAll(Arrays.asList("Tom", "George", "Peter", "Jean", "Jane"));        list2.addAll(Arrays.asList("Tom", "George", "Michael", "Michelle", "Daniel"));        System.out.println("list1 after adding list2: " + Arrays.toString(list1.toArray()));        System.out.println("list2: " + Arrays.toString(list2.toArray()));        list1.clear();        list2.clear();        list1.addAll(Arrays.asList("Tom", "George", "Peter", "Jean", "Jane"));        list2.addAll(Arrays.asList("Tom", "George", "Michael", "Michelle", "Daniel"));        list1.removeAll(list2);        System.out.println("list1 after removing list2: " + Arrays.toString(list1.toArray()));        System.out.println("list2: " + Arrays.toString(list2.toArray()));        list1.clear();        list2.clear();        list1.addAll(Arrays.asList("Tom", "George", "Peter", "Jean", "Jane"));        list2.addAll(Arrays.asList("Tom", "George", "Michael", "Michelle", "Daniel"));        list1.retainAll(list2);        System.out.println("list1 after retaining common elements with list2: " + Arrays.toString(list1.toArray()));        System.out.println("list2: " + Arrays.toString(list2.toArray()));    }}abstract class MyAbstractList<E> implements MyList<E> {    protected int size = 0;    protected MyAbstractList() {    }    protected MyAbstractList(E[] objects) {        for (E object : objects) {            add(object);        }    }    @Override    public void add(E e) {        add(size, e);    }    @Override    public boolean isEmpty() {        return size == 0;    }    @Override    public int size() {        return size;    }    @Override    public boolean remove(E e) {        if (indexOf(e) >= 0) {            remove(indexOf(e));            return true;        }        return false;    }    protected void setSize(int newSize) {        size = newSize;    }}interface MyList<E> {    void add(E e);    void add(int index, E e);    void clear();    boolean contains(E e);    E get(int index);    int indexOf(E e);    boolean isEmpty();    int lastIndexOf(E e);    boolean remove(E e);    E remove(int index);    Object[] toArray();    int size();}