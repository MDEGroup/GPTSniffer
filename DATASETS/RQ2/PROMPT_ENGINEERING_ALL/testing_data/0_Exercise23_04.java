public class ImprovedQuickSort {    public static void main(String[] args) {        int[] array = {5, 3, 8, 1, 7, 2, 6, 4};        System.out.print("Original Array: ");        printArray(array);        improvedQuickSort(array, 0, array.length - 1);        System.out.print("Sorted Array: ");        printArray(array);    }    /**     * The improved quick sort algorithm     *     * @param list  The array to be sorted     * @param first The starting index of the subarray     * @param last  The ending index of the subarray     */    public static void improvedQuickSort(int[] list, int first, int last) {        if (first < last) {            int pivotIndex = partition(list, first, last);            improvedQuickSort(list, first, pivotIndex - 1);            improvedQuickSort(list, pivotIndex + 1, last);        }    }    /**     * Partition the array list[first..last]     *     * @param list  The array to be partitioned     * @param first The starting index of the subarray     * @param last  The ending index of the subarray     * @return The index of the median value     */    private static int partition(int[] list, int first, int last) {        int pivotIndex = findMedian(list, first, (first + last) / 2, last);        int pivot = list[pivotIndex];        swap(list, pivotIndex, last);        int i = (first - 1);        for (int j = first; j < last; j++) {            if (list[j] <= pivot) {                i++;                swap(list, i, j);            }        }        swap(list, i + 1, last);        return i + 1;    }    /**     * Find the index of the median value among the first, middle, and last elements     *     * @param list  The array to find the median     * @param first The index of the first element     * @param middle The index of the middle element     * @param last  The index of the last element     * @return The index of the median value     */    private static int findMedian(int[] list, int first, int middle, int last) {        if ((list[first] <= list[middle] && list[middle] <= list[last]) ||                (list[last] <= list[middle] && list[middle] <= list[first])) {            return middle;        } else if ((list[middle] <= list[first] && list[first] <= list[last]) ||                (list[last] <= list[first] && list[first] <= list[middle])) {            return first;        } else {            return last;        }    }    /**     * Swap two elements in the array     *     * @param list The array containing elements to be swapped     * @param i    The index of the first element     * @param j    The index of the second element     */    private static void swap(int[] list, int i, int j) {        int temp = list[i];        list[i] = list[j];        list[j] = temp;    }    /**     * Print the elements of an array     *     * @param array The array to be printed     */    private static void printArray(int[] array) {        for (int value : array) {            System.out.print(value + " ");        }        System.out.println();    }}