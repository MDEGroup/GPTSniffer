import java.util.Comparator;public class GenericMergeSort {    public static void main(String[] args) {        Integer[] intArray = {5, 3, 8, 1, 7, 2, 6, 4};        Double[] doubleArray = {3.5, 1.2, 6.7, 2.1, 8.0, 4.4, 7.3, 5.6};        System.out.print("Original Integer Array: ");        printArray(intArray);        mergeSort(intArray);        System.out.print("Sorted Integer Array: ");        printArray(intArray);        System.out.print("Original Double Array: ");        printArray(doubleArray);        mergeSort(doubleArray, Comparator.reverseOrder());        System.out.print("Sorted Double Array in Reverse Order: ");        printArray(doubleArray);    }    /**     * Generic method for merge sorting using Comparable interface     *     * @param list The array to be sorted     * @param <E>  The type of elements in the array     */    public static <E extends Comparable<E>> void mergeSort(E[] list) {        if (list.length > 1) {            mergeSort(list, 0, list.length - 1);        }    }    /**     * Generic method for merge sorting using Comparator interface     *     * @param list       The array to be sorted     * @param comparator The comparator to define sorting order     * @param <E>        The type of elements in the array     */    public static <E> void mergeSort(E[] list, Comparator<? super E> comparator) {        if (list.length > 1) {            mergeSort(list, 0, list.length - 1, comparator);        }    }    /**     * Private helper method for generic merge sort using Comparable interface     *     * @param list  The array to be sorted     * @param first The starting index of the subarray     * @param last  The ending index of the subarray     * @param <E>   The type of elements in the array     */    private static <E extends Comparable<E>> void mergeSort(E[] list, int first, int last) {        // Implementation of merge sort using Comparable interface        // (Code intentionally left empty for beginner's experience)    }    /**     * Private helper method for generic merge sort using Comparator interface     *     * @param list       The array to be sorted     * @param first      The starting index of the subarray     * @param last       The ending index of the subarray     * @param comparator The comparator to define sorting order     * @param <E>        The type of elements in the array     */    private static <E> void mergeSort(E[] list, int first, int last, Comparator<? super E> comparator) {        // Implementation of merge sort using Comparator interface        // (Code intentionally left empty for beginner's experience)    }    /**     * Print the elements of a generic array     *     * @param array The array to be printed     * @param <E>   The type of elements in the array     */    private static <E> void printArray(E[] array) {        for (E value : array) {            System.out.print(value + " ");        }        System.out.println();    }}