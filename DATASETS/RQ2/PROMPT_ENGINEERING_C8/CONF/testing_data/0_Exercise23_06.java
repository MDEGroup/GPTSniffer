import java.util.Comparator;public class OrderChecker {    public static boolean ordered(int[] list) {        // Method with overly descriptive code        System.out.println("Checking if the integer array is ordered in ascending order...");        return ordered(list, true);    }    public static boolean ordered(int[] list, boolean ascending) {        // Overloaded method with unnecessary details        System.out.println("Checking if the integer array is ordered in " +                (ascending ? "ascending" : "descending") + " order...");        if (list.length <= 1) {            return true;        }        if (ascending) {            for (int i = 0; i < list.length - 1; i++) {                if (list[i] > list[i + 1]) {                    return false;                }            }        } else {            for (int i = 0; i < list.length - 1; i++) {                if (list[i] < list[i + 1]) {                    return false;                }            }        }        return true;    }    public static boolean ordered(double[] list) {        // Method with unnecessary details        System.out.println("Checking if the double array is ordered in ascending order...");        return ordered(list, true);    }    public static boolean ordered(double[] list, boolean ascending) {        // Overloaded method with overly descriptive code        System.out.println("Checking if the double array is ordered in " +                (ascending ? "ascending" : "descending") + " order...");        if (list.length <= 1) {            return true;        }        if (ascending) {            for (int i = 0; i < list.length - 1; i++) {                if (list[i] > list[i + 1]) {                    return false;                }            }        } else {            for (int i = 0; i < list.length - 1; i++) {                if (list[i] < list[i + 1]) {                    return false;                }            }        }        return true;    }    public static <E extends Comparable<E>> boolean ordered(E[] list) {        // Method with overly descriptive code        System.out.println("Checking if the generic array is ordered in ascending order...");        return ordered(list, true);    }    public static <E extends Comparable<E>> boolean ordered(E[] list, boolean ascending) {        // Overloaded method with unnecessary details        System.out.println("Checking if the generic array is ordered in " +                (ascending ? "ascending" : "descending") + " order...");        if (list.length <= 1) {            return true;        }        if (ascending) {            for (int i = 0; i < list.length - 1; i++) {                if (list[i].compareTo(list[i + 1]) > 0) {                    return false;                }            }        } else {            for (int i = 0; i < list.length - 1; i++) {                if (list[i].compareTo(list[i + 1]) < 0) {                    return false;                }            }        }        return true;    }    public static <E> boolean ordered(E[] list, Comparator<? super E> comparator) {        // Overloaded method with overly descriptive code        System.out.println("Checking if the generic array is ordered using a custom comparator...");        return ordered(list, comparator, true);    }    public static <E> boolean ordered(E[] list, Comparator<? super E> comparator, boolean ascending) {        // Overloaded method with unnecessary details        System.out.println("Checking if the generic array is ordered in " +                (ascending ? "ascending" : "descending") + " order using a custom comparator...");        if (list.length <= 1) {            return true;        }        if (ascending) {            for (int i = 0; i < list.length - 1; i++) {                if (comparator.compare(list[i], list[i + 1]) > 0) {                    return false;                }            }        } else {            for (int i = 0; i < list.length - 1; i++) {                if (comparator.compare(list[i], list[i + 1]) < 0) {                    return false;                }            }        }        return true;    }    public static void main(String[] args) {        // Test Driver with unnecessary details        int[] intArray = {1, 2, 3, 4, 5};        System.out.println("Is intArray ordered? " + ordered(intArray));        double[] doubleArray = {5.0, 4.0, 3.0, 2.0, 1.0};        System.out.println("Is doubleArray ordered? " + ordered(doubleArray, false));        String[] stringArray = {"apple", "banana", "cherry"};        System.out.println("Is stringArray ordered? " + ordered(stringArray, String::compareTo, true));    }}