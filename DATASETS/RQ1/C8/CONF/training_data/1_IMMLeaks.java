public class IMMLeaks { static class ReferenceCleaner   implements MessageQueue.IdleHandler, View.OnAttachStateChangeListener,   ViewTreeObserver.OnGlobalFocusChangeListener {  private final InputMethodManager inputMethodManager;  private final Field mHField;  private final Field mServedViewField;  private final Method finishInputLockedMethod;  ReferenceCleaner(InputMethodManager inputMethodManager, Field mHField, Field mServedViewField,    Method finishInputLockedMethod) {   this.inputMethodManager = inputMethodManager;   this.mHField = mHField;   this.mServedViewField = mServedViewField;   this.finishInputLockedMethod = finishInputLockedMethod;  }  @Override public void onGlobalFocusChanged(View oldFocus, View newFocus) {   if (newFocus == null) {    return;   }   if (oldFocus != null) {    oldFocus.removeOnAttachStateChangeListener(this);   }   Looper.myQueue().removeIdleHandler(this);   newFocus.addOnAttachStateChangeListener(this);  }  @Override public void onViewAttachedToWindow(View v) {  }  @Override public void onViewDetachedFromWindow(View v) {   v.removeOnAttachStateChangeListener(this);   Looper.myQueue().removeIdleHandler(this);   Looper.myQueue().addIdleHandler(this);  }  @Override public boolean queueIdle() {   clearInputMethodManagerLeak();   return false;  }  private void clearInputMethodManagerLeak() {   try {    Object lock = mHField.get(inputMethodManager);        synchronized (lock) {     View servedView = (View) mServedViewField.get(inputMethodManager);     if (servedView != null) {      boolean servedViewAttached = servedView.getWindowVisibility() != View.GONE;      if (servedViewAttached) {                            servedView.removeOnAttachStateChangeListener(this);       servedView.addOnAttachStateChangeListener(this);      } else {              Activity activity = extractActivity(servedView.getContext());       if (activity == null || activity.getWindow() == null) {                finishInputLockedMethod.invoke(inputMethodManager);       } else {        View decorView = activity.getWindow().peekDecorView();        boolean windowAttached = decorView.getWindowVisibility() != View.GONE;        if (!windowAttached) {         finishInputLockedMethod.invoke(inputMethodManager);        } else {         decorView.requestFocusFromTouch();        }       }      }     }    }   } catch (IllegalAccessException | InvocationTargetException unexpected) {    Log.e("IMMLeaks", "Unexpected reflection exception", unexpected);   }  }  private Activity extractActivity(Context context) {   while (true) {    if (context instanceof Application) {     return null;    } else if (context instanceof Activity) {     return (Activity) context;    } else if (context instanceof ContextWrapper) {     Context baseContext = ((ContextWrapper) context).getBaseContext();          if (baseContext == context) {      return null;     }     context = baseContext;    } else {     return null;    }   }  } }  public static void fixFocusedViewLeak(Application application) {    if (SDK_INT < KITKAT || SDK_INT > 22) {   return;  }  final InputMethodManager inputMethodManager =    (InputMethodManager) application.getSystemService(INPUT_METHOD_SERVICE);  final Field mServedViewField;  final Field mHField;  final Method finishInputLockedMethod;  final Method focusInMethod;  try {   mServedViewField = InputMethodManager.class.getDeclaredField("mServedView");   mServedViewField.setAccessible(true);   mHField = InputMethodManager.class.getDeclaredField("mServedView");   mHField.setAccessible(true);   finishInputLockedMethod = InputMethodManager.class.getDeclaredMethod("finishInputLocked");   finishInputLockedMethod.setAccessible(true);   focusInMethod = InputMethodManager.class.getDeclaredMethod("focusIn", View.class);   focusInMethod.setAccessible(true);  } catch (NoSuchMethodException | NoSuchFieldException unexpected) {   Log.e("IMMLeaks", "Unexpected reflection exception", unexpected);   return;  }  application.registerActivityLifecycleCallbacks(new LifecycleCallbacksAdapter() {   @Override public void onActivityCreated(Activity activity, Bundle savedInstanceState) {    ReferenceCleaner cleaner =      new ReferenceCleaner(inputMethodManager, mHField, mServedViewField,        finishInputLockedMethod);    View rootView = activity.getWindow().getDecorView().getRootView();    ViewTreeObserver viewTreeObserver = rootView.getViewTreeObserver();    viewTreeObserver.addOnGlobalFocusChangeListener(cleaner);   }  }); }}