public class InfixToPostfix {  public static String infixToPostfix(String expression) {    StringBuilder postfix = new StringBuilder();    Stack<Character> stack = new Stack<>();    for (int i = 0; i < expression.length(); i++) {      char ch = expression.charAt(i);      if (Character.isDigit(ch)) {        postfix.append(ch);      } else if (ch == '(') {        stack.push(ch);      } else if (ch == ')') {        while (!stack.isEmpty() && stack.peek() != '(') {          postfix.append(stack.pop());        }        stack.pop();       } else {        while (!stack.isEmpty() && precedence(ch) <= precedence(stack.peek())) {          postfix.append(stack.pop());        }        stack.push(ch);      }    }    while (!stack.isEmpty()) {      postfix.append(stack.pop());    }    return postfix.toString();  }  private static int precedence(char op) {    switch (op) {      case '+':      case '-':        return 1;      case '*':      case '/':        return 2;      case '^':        return 3;      default:        return 0;    }  }  public static void main(String[] args) {    String expression1 = "(1 + 2) * 3";    String expression2 = "2 * (1 + 3)";    System.out.println(infixToPostfix(expression1));     System.out.println(infixToPostfix(expression2));   }}